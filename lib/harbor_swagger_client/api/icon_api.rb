=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class IconApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get artifact icon
    # Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter \"digest\" in the path doesn't match the hash of the returned content
    # @param digest The digest of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Icon]
    def get_icon(digest, opts = {})
      data, _status_code, _headers = get_icon_with_http_info(digest, opts)
      data
    end

    # Get artifact icon
    # Get the artifact icon with the specified digest. As the original icon image is resized and encoded before returning, the parameter \&quot;digest\&quot; in the path doesn&#39;t match the hash of the returned content
    # @param digest The digest of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_request_id An unique ID for the request
    # @return [Array<(Icon, Fixnum, Hash)>] Icon data, response status code and response headers
    def get_icon_with_http_info(digest, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IconApi.get_icon ...'
      end
      # verify the required parameter 'digest' is set
      if @api_client.config.client_side_validation && digest.nil?
        fail ArgumentError, "Missing the required parameter 'digest' when calling IconApi.get_icon"
      end
      if @api_client.config.client_side_validation && !opts[:'x_request_id'].nil? && opts[:'x_request_id'].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"x_request_id"]" when calling IconApi.get_icon, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/icons/{digest}'.sub('{' + 'digest' + '}', digest.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Request-Id'] = opts[:'x_request_id'] if !opts[:'x_request_id'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basic']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Icon')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IconApi#get_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
