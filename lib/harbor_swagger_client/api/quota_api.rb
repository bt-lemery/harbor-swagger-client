=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 1.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class QuotaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List quotas
    # List quotas
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reference The reference type of quota.
    # @option opts [String] :sort Sort method, valid values include: &#39;hard.resource_name&#39;, &#39;-hard.resource_name&#39;, &#39;used.resource_name&#39;, &#39;-used.resource_name&#39;. Here &#39;-&#39; stands for descending order, resource_name should be the real resource name of the quota. 
    # @option opts [Integer] :page The page nubmer, default is 1.
    # @option opts [Integer] :page_size The size of per page, default is 10, maximum is 100.
    # @return [Array<Quota>]
    def quotas_get(opts = {})
      data, _status_code, _headers = quotas_get_with_http_info(opts)
      data
    end

    # List quotas
    # List quotas
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reference The reference type of quota.
    # @option opts [String] :sort Sort method, valid values include: &#39;hard.resource_name&#39;, &#39;-hard.resource_name&#39;, &#39;used.resource_name&#39;, &#39;-used.resource_name&#39;. Here &#39;-&#39; stands for descending order, resource_name should be the real resource name of the quota. 
    # @option opts [Integer] :page The page nubmer, default is 1.
    # @option opts [Integer] :page_size The size of per page, default is 10, maximum is 100.
    # @return [Array<(Array<Quota>, Fixnum, Hash)>] Array<Quota> data, response status code and response headers
    def quotas_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.quotas_get ...'
      end
      # resource path
      local_var_path = '/quotas'

      # query parameters
      query_params = {}
      query_params[:'reference'] = opts[:'reference'] if !opts[:'reference'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Quota>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#quotas_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the specified quota
    # Get the specified quota
    # @param id Quota ID
    # @param [Hash] opts the optional parameters
    # @return [Quota]
    def quotas_id_get(id, opts = {})
      data, _status_code, _headers = quotas_id_get_with_http_info(id, opts)
      data
    end

    # Get the specified quota
    # Get the specified quota
    # @param id Quota ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Quota, Fixnum, Hash)>] Quota data, response status code and response headers
    def quotas_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.quotas_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QuotaApi.quotas_id_get"
      end
      # resource path
      local_var_path = '/quotas/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Quota')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#quotas_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the specified quota
    # Update hard limits of the specified quota
    # @param id Quota ID
    # @param hard The new hard limits for the quota
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def quotas_id_put(id, hard, opts = {})
      quotas_id_put_with_http_info(id, hard, opts)
      nil
    end

    # Update the specified quota
    # Update hard limits of the specified quota
    # @param id Quota ID
    # @param hard The new hard limits for the quota
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def quotas_id_put_with_http_info(id, hard, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuotaApi.quotas_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QuotaApi.quotas_id_put"
      end
      # verify the required parameter 'hard' is set
      if @api_client.config.client_side_validation && hard.nil?
        fail ArgumentError, "Missing the required parameter 'hard' when calling QuotaApi.quotas_id_put"
      end
      # resource path
      local_var_path = '/quotas/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(hard)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuotaApi#quotas_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
