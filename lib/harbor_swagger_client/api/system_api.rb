=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'uri'

module SwaggerClient
  class SystemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the system level allowlist of CVE.
    # Get the system level allowlist of CVE.  This API can be called by all authenticated users.
    # @param [Hash] opts the optional parameters
    # @return [CVEAllowlist]
    def system_cve_allowlist_get(opts = {})
      data, _status_code, _headers = system_cve_allowlist_get_with_http_info(opts)
      data
    end

    # Get the system level allowlist of CVE.
    # Get the system level allowlist of CVE.  This API can be called by all authenticated users.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CVEAllowlist, Fixnum, Hash)>] CVEAllowlist data, response status code and response headers
    def system_cve_allowlist_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.system_cve_allowlist_get ...'
      end
      # resource path
      local_var_path = '/system/CVEAllowlist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CVEAllowlist')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#system_cve_allowlist_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the system level allowlist of CVE.
    # This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
    # @param [Hash] opts the optional parameters
    # @option opts [CVEAllowlist] :allowlist The allowlist with new content
    # @return [nil]
    def system_cve_allowlist_put(opts = {})
      system_cve_allowlist_put_with_http_info(opts)
      nil
    end

    # Update the system level allowlist of CVE.
    # This API overwrites the system level allowlist of CVE with the list in request body.  Only system Admin has permission to call this API.
    # @param [Hash] opts the optional parameters
    # @option opts [CVEAllowlist] :allowlist The allowlist with new content
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def system_cve_allowlist_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.system_cve_allowlist_put ...'
      end
      # resource path
      local_var_path = '/system/CVEAllowlist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'allowlist'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#system_cve_allowlist_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test the OIDC endpoint.
    # Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
    # @param endpoint Request body for OIDC endpoint to be tested.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def system_oidc_ping_post(endpoint, opts = {})
      system_oidc_ping_post_with_http_info(endpoint, opts)
      nil
    end

    # Test the OIDC endpoint.
    # Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
    # @param endpoint Request body for OIDC endpoint to be tested.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def system_oidc_ping_post_with_http_info(endpoint, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SystemApi.system_oidc_ping_post ...'
      end
      # verify the required parameter 'endpoint' is set
      if @api_client.config.client_side_validation && endpoint.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint' when calling SystemApi.system_oidc_ping_post"
      end
      # resource path
      local_var_path = '/system/oidc/ping'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(endpoint)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SystemApi#system_oidc_ping_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
