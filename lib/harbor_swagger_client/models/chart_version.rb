=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 1.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module SwaggerClient
  # A specified chart entry
  class ChartVersion
    # The name of the chart
    attr_accessor :name

    # The URL to the relevant project page
    attr_accessor :home

    # The URL to the source code of chart
    attr_accessor :sources

    # A SemVer 2 version of chart
    attr_accessor :version

    # A one-sentence description of chart
    attr_accessor :description

    # A list of string keywords
    attr_accessor :keywords

    # The name of template engine
    attr_accessor :engine

    # The URL to an icon file
    attr_accessor :icon

    # The API version of this chart
    attr_accessor :api_version

    # The version of the application enclosed in the chart
    attr_accessor :app_version

    # Whether or not this chart is deprecated
    attr_accessor :deprecated

    # The created time of the chart entry
    attr_accessor :created

    # A flag to indicate if the chart entry is removed
    attr_accessor :removed

    # The digest value of the chart entry
    attr_accessor :digest

    # The urls of the chart entry
    attr_accessor :urls

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'home' => :'home',
        :'sources' => :'sources',
        :'version' => :'version',
        :'description' => :'description',
        :'keywords' => :'keywords',
        :'engine' => :'engine',
        :'icon' => :'icon',
        :'api_version' => :'apiVersion',
        :'app_version' => :'appVersion',
        :'deprecated' => :'deprecated',
        :'created' => :'created',
        :'removed' => :'removed',
        :'digest' => :'digest',
        :'urls' => :'urls'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'home' => :'String',
        :'sources' => :'Array<String>',
        :'version' => :'String',
        :'description' => :'String',
        :'keywords' => :'Array<String>',
        :'engine' => :'String',
        :'icon' => :'String',
        :'api_version' => :'String',
        :'app_version' => :'String',
        :'deprecated' => :'BOOLEAN',
        :'created' => :'String',
        :'removed' => :'BOOLEAN',
        :'digest' => :'String',
        :'urls' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'home')
        self.home = attributes[:'home']
      end

      if attributes.has_key?(:'sources')
        if (value = attributes[:'sources']).is_a?(Array)
          self.sources = value
        end
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.has_key?(:'engine')
        self.engine = attributes[:'engine']
      end

      if attributes.has_key?(:'icon')
        self.icon = attributes[:'icon']
      end

      if attributes.has_key?(:'apiVersion')
        self.api_version = attributes[:'apiVersion']
      end

      if attributes.has_key?(:'appVersion')
        self.app_version = attributes[:'appVersion']
      end

      if attributes.has_key?(:'deprecated')
        self.deprecated = attributes[:'deprecated']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'removed')
        self.removed = attributes[:'removed']
      end

      if attributes.has_key?(:'digest')
        self.digest = attributes[:'digest']
      end

      if attributes.has_key?(:'urls')
        if (value = attributes[:'urls']).is_a?(Array)
          self.urls = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      if @engine.nil?
        invalid_properties.push('invalid value for "engine", engine cannot be nil.')
      end

      if @icon.nil?
        invalid_properties.push('invalid value for "icon", icon cannot be nil.')
      end

      if @api_version.nil?
        invalid_properties.push('invalid value for "api_version", api_version cannot be nil.')
      end

      if @app_version.nil?
        invalid_properties.push('invalid value for "app_version", app_version cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @version.nil?
      return false if @engine.nil?
      return false if @icon.nil?
      return false if @api_version.nil?
      return false if @app_version.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          home == o.home &&
          sources == o.sources &&
          version == o.version &&
          description == o.description &&
          keywords == o.keywords &&
          engine == o.engine &&
          icon == o.icon &&
          api_version == o.api_version &&
          app_version == o.app_version &&
          deprecated == o.deprecated &&
          created == o.created &&
          removed == o.removed &&
          digest == o.digest &&
          urls == o.urls
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, home, sources, version, description, keywords, engine, icon, api_version, app_version, deprecated, created, removed, digest, urls].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
