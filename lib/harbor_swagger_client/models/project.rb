=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 1.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module SwaggerClient
  class Project
    # Project ID
    attr_accessor :project_id

    # The owner ID of the project always means the creator of the project.
    attr_accessor :owner_id

    # The name of the project.
    attr_accessor :name

    # The creation time of the project.
    attr_accessor :creation_time

    # The update time of the project.
    attr_accessor :update_time

    # A deletion mark of the project.
    attr_accessor :deleted

    # The owner name of the project.
    attr_accessor :owner_name

    # Correspond to the UI about whether the project's publicity is  updatable (for UI)
    attr_accessor :togglable

    # The role ID of the current user who triggered the API (for UI)
    attr_accessor :current_user_role_id

    # The number of the repositories under this project.
    attr_accessor :repo_count

    # The total number of charts under this project.
    attr_accessor :chart_count

    # The metadata of the project.
    attr_accessor :metadata

    # The CVE whitelist of this project.
    attr_accessor :cve_whitelist

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'project_id' => :'project_id',
        :'owner_id' => :'owner_id',
        :'name' => :'name',
        :'creation_time' => :'creation_time',
        :'update_time' => :'update_time',
        :'deleted' => :'deleted',
        :'owner_name' => :'owner_name',
        :'togglable' => :'togglable',
        :'current_user_role_id' => :'current_user_role_id',
        :'repo_count' => :'repo_count',
        :'chart_count' => :'chart_count',
        :'metadata' => :'metadata',
        :'cve_whitelist' => :'cve_whitelist'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'project_id' => :'Integer',
        :'owner_id' => :'Integer',
        :'name' => :'String',
        :'creation_time' => :'String',
        :'update_time' => :'String',
        :'deleted' => :'BOOLEAN',
        :'owner_name' => :'String',
        :'togglable' => :'BOOLEAN',
        :'current_user_role_id' => :'Integer',
        :'repo_count' => :'Integer',
        :'chart_count' => :'Integer',
        :'metadata' => :'ProjectMetadata',
        :'cve_whitelist' => :'CVEWhitelist'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.has_key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'creation_time')
        self.creation_time = attributes[:'creation_time']
      end

      if attributes.has_key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.has_key?(:'owner_name')
        self.owner_name = attributes[:'owner_name']
      end

      if attributes.has_key?(:'togglable')
        self.togglable = attributes[:'togglable']
      end

      if attributes.has_key?(:'current_user_role_id')
        self.current_user_role_id = attributes[:'current_user_role_id']
      end

      if attributes.has_key?(:'repo_count')
        self.repo_count = attributes[:'repo_count']
      end

      if attributes.has_key?(:'chart_count')
        self.chart_count = attributes[:'chart_count']
      end

      if attributes.has_key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.has_key?(:'cve_whitelist')
        self.cve_whitelist = attributes[:'cve_whitelist']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          project_id == o.project_id &&
          owner_id == o.owner_id &&
          name == o.name &&
          creation_time == o.creation_time &&
          update_time == o.update_time &&
          deleted == o.deleted &&
          owner_name == o.owner_name &&
          togglable == o.togglable &&
          current_user_role_id == o.current_user_role_id &&
          repo_count == o.repo_count &&
          chart_count == o.chart_count &&
          metadata == o.metadata &&
          cve_whitelist == o.cve_whitelist
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [project_id, owner_id, name, creation_time, update_time, deleted, owner_name, togglable, current_user_role_id, repo_count, chart_count, metadata, cve_whitelist].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
