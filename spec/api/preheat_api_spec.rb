=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PreheatApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PreheatApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PreheatApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PreheatApi' do
    it 'should create an instance of PreheatApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PreheatApi)
    end
  end

  # unit tests for create_instance
  # Create p2p provider instances
  # Create p2p provider instances
  # @param instance The JSON object of instance.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'create_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_policy
  # Create a preheat policy under a project
  # Create a preheat policy under a project
  # @param project_name The name of the project
  # @param policy The policy schema info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'create_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_instance
  # Delete the specified P2P provider instance
  # Delete the specified P2P provider instance
  # @param preheat_instance_name Instance Name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'delete_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_policy
  # Delete a preheat policy
  # Delete a preheat policy
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'delete_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_execution
  # Get a execution detail by id
  # Get a execution detail by id
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param execution_id Execution ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [Execution]
  describe 'get_execution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_instance
  # Get a P2P provider instance
  # Get a P2P provider instance
  # @param preheat_instance_name Instance Name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [Instance]
  describe 'get_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_policy
  # Get a preheat policy
  # Get a preheat policy
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [PreheatPolicy]
  describe 'get_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_preheat_log
  # Get the log text stream of the specified task for the given execution
  # Get the log text stream of the specified task for the given execution
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param execution_id Execution ID
  # @param task_id Task ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [String]
  describe 'get_preheat_log test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_executions
  # List executions for the given policy
  # List executions for the given policy
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @option opts [Integer] :page The page number
  # @option opts [Integer] :page_size The size of per page
  # @option opts [String] :q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max]
  # @return [Array<Execution>]
  describe 'list_executions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_instances
  # List P2P provider instances
  # List P2P provider instances
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @option opts [Integer] :page The page number
  # @option opts [Integer] :page_size The size of per page
  # @option opts [String] :q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max]
  # @return [Array<Instance>]
  describe 'list_instances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_policies
  # List preheat policies
  # List preheat policies
  # @param project_name The name of the project
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @option opts [Integer] :page The page number
  # @option opts [Integer] :page_size The size of per page
  # @option opts [String] :q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max]
  # @return [Array<PreheatPolicy>]
  describe 'list_policies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_providers
  # List P2P providers
  # List P2P providers
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [Array<Metadata>]
  describe 'list_providers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_providers_under_project
  # Get all providers at project level
  # Get all providers at project level
  # @param project_name The name of the project
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [Array<ProviderUnderProject>]
  describe 'list_providers_under_project test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_tasks
  # List all the related tasks for the given execution
  # List all the related tasks for the given execution
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param execution_id Execution ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @option opts [Integer] :page The page number
  # @option opts [Integer] :page_size The size of per page
  # @option opts [String] :q Query string to query resources. Supported query patterns are \&quot;exact match(k&#x3D;v)\&quot;, \&quot;fuzzy match(k&#x3D;~v)\&quot;, \&quot;range(k&#x3D;[min~max])\&quot;, \&quot;list with union releationship(k&#x3D;{v1 v2 v3})\&quot; and \&quot;list with intersetion relationship(k&#x3D;(v1 v2 v3))\&quot;. The value of range and list can be string(enclosed by \&quot; or &#39;), integer or time(in format \&quot;2020-04-09 02:36:00\&quot;). All of these query patterns should be put in the query string \&quot;q&#x3D;xxx\&quot; and splitted by \&quot;,\&quot;. e.g. q&#x3D;k1&#x3D;v1,k2&#x3D;~v2,k3&#x3D;[min~max]
  # @return [Array<Task>]
  describe 'list_tasks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for manual_preheat
  # Manual preheat
  # Manual preheat
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param policy The policy schema info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'manual_preheat test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for ping_instances
  # Ping status of a instance.
  # This endpoint checks status of a instance, the instance can be given by ID or Endpoint URL (together with credential) 
  # @param instance The JSON object of instance.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'ping_instances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for stop_execution
  # Stop a execution
  # Stop a execution
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param execution_id Execution ID
  # @param execution The data of execution
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'stop_execution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_instance
  # Update the specified P2P provider instance
  # Update the specified P2P provider instance
  # @param preheat_instance_name Instance Name
  # @param instance The instance to update
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'update_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_policy
  # Update preheat policy
  # Update preheat policy
  # @param project_name The name of the project
  # @param preheat_policy_name Preheat Policy Name
  # @param policy The policy schema info
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_request_id An unique ID for the request
  # @return [nil]
  describe 'update_policy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
