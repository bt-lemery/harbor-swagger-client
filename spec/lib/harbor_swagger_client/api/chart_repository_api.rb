=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 1.10.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class ChartRepositoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Upload a chart file to the defult 'library' project.
    # Upload a chart file to the default 'library' project. Uploading together with the prov file at the same time is also supported.
    # @param chart The chart file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :prov The provance file
    # @return [nil]
    def chartrepo_charts_post(chart, opts = {})
      chartrepo_charts_post_with_http_info(chart, opts)
      nil
    end

    # Upload a chart file to the defult &#39;library&#39; project.
    # Upload a chart file to the default &#39;library&#39; project. Uploading together with the prov file at the same time is also supported.
    # @param chart The chart file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :prov The provance file
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_charts_post_with_http_info(chart, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_charts_post ...'
      end
      # verify the required parameter 'chart' is set
      if @api_client.config.client_side_validation && chart.nil?
        fail ArgumentError, "Missing the required parameter 'chart' when calling ChartRepositoryApi.chartrepo_charts_post"
      end
      # resource path
      local_var_path = '/chartrepo/charts'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['chart'] = chart
      form_params['prov'] = opts[:'prov'] if !opts[:'prov'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_charts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check the health of chart repository service.
    # Check the health of chart repository service.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def chartrepo_health_get(opts = {})
      data, _status_code, _headers = chartrepo_health_get_with_http_info(opts)
      data
    end

    # Check the health of chart repository service.
    # Check the health of chart repository service.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def chartrepo_health_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_health_get ...'
      end
      # resource path
      local_var_path = '/chartrepo/health'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_health_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the charts under the specified project
    # Get all the charts under the specified project
    # @param repo The project name
    # @param [Hash] opts the optional parameters
    # @return [Array<ChartInfoEntry>]
    def chartrepo_repo_charts_get(repo, opts = {})
      data, _status_code, _headers = chartrepo_repo_charts_get_with_http_info(repo, opts)
      data
    end

    # Get all the charts under the specified project
    # Get all the charts under the specified project
    # @param repo The project name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChartInfoEntry>, Fixnum, Hash)>] Array<ChartInfoEntry> data, response status code and response headers
    def chartrepo_repo_charts_get_with_http_info(repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_get ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_get"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChartInfoEntry>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all the versions of the specified chart
    # Delete all the versions of the specified chart
    # @param repo The project name
    # @param name The chart name
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def chartrepo_repo_charts_name_delete(repo, name, opts = {})
      chartrepo_repo_charts_name_delete_with_http_info(repo, name, opts)
      nil
    end

    # Delete all the versions of the specified chart
    # Delete all the versions of the specified chart
    # @param repo The project name
    # @param name The chart name
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_repo_charts_name_delete_with_http_info(repo, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_name_delete ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_name_delete"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ChartRepositoryApi.chartrepo_repo_charts_name_delete"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts/{name}'.sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the versions of the specified chart
    # Get all the versions of the specified chart
    # @param repo The project name
    # @param name The chart name
    # @param [Hash] opts the optional parameters
    # @return [ChartVersions]
    def chartrepo_repo_charts_name_get(repo, name, opts = {})
      data, _status_code, _headers = chartrepo_repo_charts_name_get_with_http_info(repo, name, opts)
      data
    end

    # Get all the versions of the specified chart
    # Get all the versions of the specified chart
    # @param repo The project name
    # @param name The chart name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChartVersions, Fixnum, Hash)>] ChartVersions data, response status code and response headers
    def chartrepo_repo_charts_name_get_with_http_info(repo, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_name_get ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_name_get"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ChartRepositoryApi.chartrepo_repo_charts_name_get"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts/{name}'.sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChartVersions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the specified chart version
    # Delete the specified chart version
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def chartrepo_repo_charts_name_version_delete(repo, name, version, opts = {})
      chartrepo_repo_charts_name_version_delete_with_http_info(repo, name, version, opts)
      nil
    end

    # Delete the specified chart version
    # Delete the specified chart version
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_repo_charts_name_version_delete_with_http_info(repo, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_name_version_delete ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_delete"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_delete"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts/{name}/{version}'.sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_name_version_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the specified chart version
    # Get the specified chart version
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param [Hash] opts the optional parameters
    # @return [ChartVersionDetails]
    def chartrepo_repo_charts_name_version_get(repo, name, version, opts = {})
      data, _status_code, _headers = chartrepo_repo_charts_name_version_get_with_http_info(repo, name, version, opts)
      data
    end

    # Get the specified chart version
    # Get the specified chart version
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChartVersionDetails, Fixnum, Hash)>] ChartVersionDetails data, response status code and response headers
    def chartrepo_repo_charts_name_version_get_with_http_info(repo, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_name_version_get ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_get"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_get"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts/{name}/{version}'.sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChartVersionDetails')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_name_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the attahced labels of chart.
    # Return the attahced labels of the specified chart version.
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def chartrepo_repo_charts_name_version_labels_get(repo, name, version, opts = {})
      chartrepo_repo_charts_name_version_labels_get_with_http_info(repo, name, version, opts)
      nil
    end

    # Return the attahced labels of chart.
    # Return the attahced labels of the specified chart version.
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_repo_charts_name_version_labels_get_with_http_info(repo, name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_get ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_get"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_get"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts/{name}/{version}/labels'.sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_name_version_labels_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove label from chart.
    # Remove label from the specified chart version.
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param id The label ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def chartrepo_repo_charts_name_version_labels_id_delete(repo, name, version, id, opts = {})
      chartrepo_repo_charts_name_version_labels_id_delete_with_http_info(repo, name, version, id, opts)
      nil
    end

    # Remove label from chart.
    # Remove label from the specified chart version.
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param id The label ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_repo_charts_name_version_labels_id_delete_with_http_info(repo, name, version, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_id_delete ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_id_delete"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_id_delete"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_id_delete"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts/{name}/{version}/labels/{id}'.sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'version' + '}', version.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_name_version_labels_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark label to chart.
    # Mark label to the specified chart version.
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param label The label being marked to the chart version
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def chartrepo_repo_charts_name_version_labels_post(repo, name, version, label, opts = {})
      chartrepo_repo_charts_name_version_labels_post_with_http_info(repo, name, version, label, opts)
      nil
    end

    # Mark label to chart.
    # Mark label to the specified chart version.
    # @param repo The project name
    # @param name The chart name
    # @param version The chart version
    # @param label The label being marked to the chart version
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_repo_charts_name_version_labels_post_with_http_info(repo, name, version, label, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_post ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_post"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_post"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_post"
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling ChartRepositoryApi.chartrepo_repo_charts_name_version_labels_post"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts/{name}/{version}/labels'.sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(label)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_name_version_labels_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload a chart file to the specified project.
    # Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
    # @param repo The project name
    # @param chart The chart file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :prov The provance file
    # @return [nil]
    def chartrepo_repo_charts_post(repo, chart, opts = {})
      chartrepo_repo_charts_post_with_http_info(repo, chart, opts)
      nil
    end

    # Upload a chart file to the specified project.
    # Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
    # @param repo The project name
    # @param chart The chart file
    # @param [Hash] opts the optional parameters
    # @option opts [File] :prov The provance file
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_repo_charts_post_with_http_info(repo, chart, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_charts_post ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_charts_post"
      end
      # verify the required parameter 'chart' is set
      if @api_client.config.client_side_validation && chart.nil?
        fail ArgumentError, "Missing the required parameter 'chart' when calling ChartRepositoryApi.chartrepo_repo_charts_post"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/charts'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['chart'] = chart
      form_params['prov'] = opts[:'prov'] if !opts[:'prov'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_charts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload a provance file to the specified project.
    # Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
    # @param repo The project name
    # @param prov The provance file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def chartrepo_repo_prov_post(repo, prov, opts = {})
      chartrepo_repo_prov_post_with_http_info(repo, prov, opts)
      nil
    end

    # Upload a provance file to the specified project.
    # Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
    # @param repo The project name
    # @param prov The provance file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def chartrepo_repo_prov_post_with_http_info(repo, prov, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChartRepositoryApi.chartrepo_repo_prov_post ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling ChartRepositoryApi.chartrepo_repo_prov_post"
      end
      # verify the required parameter 'prov' is set
      if @api_client.config.client_side_validation && prov.nil?
        fail ArgumentError, "Missing the required parameter 'prov' when calling ChartRepositoryApi.chartrepo_repo_prov_post"
      end
      # resource path
      local_var_path = '/chartrepo/{repo}/prov'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['prov'] = prov

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChartRepositoryApi#chartrepo_repo_prov_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
