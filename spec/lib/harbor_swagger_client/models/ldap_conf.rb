=begin
#Harbor API

#These APIs provide services for manipulating Harbor project.

OpenAPI spec version: 1.10.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module SwaggerClient
  class LdapConf
    # The url of ldap service.
    attr_accessor :ldap_url

    # The search dn of ldap service.
    attr_accessor :ldap_search_dn

    # The search password of ldap service.
    attr_accessor :ldap_search_password

    # The base dn of ldap service.
    attr_accessor :ldap_base_dn

    # The serach filter of ldap service.
    attr_accessor :ldap_filter

    # The serach uid from ldap service attributes.
    attr_accessor :ldap_uid

    # The serach scope of ldap service.
    attr_accessor :ldap_scope

    # The connect timeout of ldap service(second).
    attr_accessor :ldap_connection_timeout

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ldap_url' => :'ldap_url',
        :'ldap_search_dn' => :'ldap_search_dn',
        :'ldap_search_password' => :'ldap_search_password',
        :'ldap_base_dn' => :'ldap_base_dn',
        :'ldap_filter' => :'ldap_filter',
        :'ldap_uid' => :'ldap_uid',
        :'ldap_scope' => :'ldap_scope',
        :'ldap_connection_timeout' => :'ldap_connection_timeout'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ldap_url' => :'String',
        :'ldap_search_dn' => :'String',
        :'ldap_search_password' => :'String',
        :'ldap_base_dn' => :'String',
        :'ldap_filter' => :'String',
        :'ldap_uid' => :'String',
        :'ldap_scope' => :'Integer',
        :'ldap_connection_timeout' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ldap_url')
        self.ldap_url = attributes[:'ldap_url']
      end

      if attributes.has_key?(:'ldap_search_dn')
        self.ldap_search_dn = attributes[:'ldap_search_dn']
      end

      if attributes.has_key?(:'ldap_search_password')
        self.ldap_search_password = attributes[:'ldap_search_password']
      end

      if attributes.has_key?(:'ldap_base_dn')
        self.ldap_base_dn = attributes[:'ldap_base_dn']
      end

      if attributes.has_key?(:'ldap_filter')
        self.ldap_filter = attributes[:'ldap_filter']
      end

      if attributes.has_key?(:'ldap_uid')
        self.ldap_uid = attributes[:'ldap_uid']
      end

      if attributes.has_key?(:'ldap_scope')
        self.ldap_scope = attributes[:'ldap_scope']
      end

      if attributes.has_key?(:'ldap_connection_timeout')
        self.ldap_connection_timeout = attributes[:'ldap_connection_timeout']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ldap_url == o.ldap_url &&
          ldap_search_dn == o.ldap_search_dn &&
          ldap_search_password == o.ldap_search_password &&
          ldap_base_dn == o.ldap_base_dn &&
          ldap_filter == o.ldap_filter &&
          ldap_uid == o.ldap_uid &&
          ldap_scope == o.ldap_scope &&
          ldap_connection_timeout == o.ldap_connection_timeout
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ldap_url, ldap_search_dn, ldap_search_password, ldap_base_dn, ldap_filter, ldap_uid, ldap_scope, ldap_connection_timeout].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
